# custom_tools.py
# Improved custom tools with better error handling and validation

import logging
import traceback
from crewai.tools import BaseTool
from utils.azure_openai import call_azure_openai

# Set up logging
logger = logging.getLogger(__name__)

class ContentWritingTool(BaseTool):
    name: str = "Content Writer"
    description: str = "A tool for generating high-quality written content like articles, summaries, and blog posts."

    def _run(self, topic: str) -> str:
        """
        Generate content based on the provided topic
        """
        try:
            logger.info(f"ContentWritingTool: Processing topic: {topic[:100]}...")
            
            # Validate input
            if not topic or not topic.strip():
                raise ValueError("Topic cannot be empty")
            
            system_prompt = (
                "You are an expert content creator. Write clearly, engagingly, and concisely. "
                "Focus on the user's request and write naturally. Provide complete, well-structured content."
            )
            
            logger.debug("Calling Azure OpenAI for content generation")
            result = call_azure_openai(system_prompt, topic)
            
            # Validate result
            if not result or not result.strip():
                raise ValueError("No content was generated by the AI model")
            
            logger.info("ContentWritingTool: Successfully generated content")
            return result.strip()
            
        except Exception as e:
            error_msg = f"ContentWritingTool failed: {str(e)}"
            logger.error(f"{error_msg}\nTraceback: {traceback.format_exc()}")
            raise RuntimeError(error_msg)

class CodeGenerationTool(BaseTool):
    name: str = "Code Generator"
    description: str = "A tool for generating functional and well-commented code snippets in various programming languages, especially Python and React."

    def _run(self, code_request: str) -> str:
        """
        Generate code based on the provided request
        """
        try:
            logger.info(f"CodeGenerationTool: Processing request: {code_request[:100]}...")
            
            # Validate input
            if not code_request or not code_request.strip():
                raise ValueError("Code request cannot be empty")
            
            system_prompt = (
                "You are a skilled software developer. Generate clean, efficient, and well-commented code. "
                "If a language is specified, use it; otherwise, default to Python. "
                "Provide complete, working code with explanations where necessary."
            )
            
            logger.debug("Calling Azure OpenAI for code generation")
            result = call_azure_openai(system_prompt, code_request)
            
            # Validate result
            if not result or not result.strip():
                raise ValueError("No code was generated by the AI model")
            
            logger.info("CodeGenerationTool: Successfully generated code")
            return result.strip()
            
        except Exception as e:
            error_msg = f"CodeGenerationTool failed: {str(e)}"
            logger.error(f"{error_msg}\nTraceback: {traceback.format_exc()}")
            raise RuntimeError(error_msg)

class DataSummaryTool(BaseTool):
    name: str = "Simple Data Analyzer"
    description: str = "Summarizes key insights from data."

    def _run(self, data: str) -> str:
        """
        Analyze and summarize the provided data
        """
        try:
            logger.info(f"DataSummaryTool: Processing data: {data[:100]}...")
            
            # Validate input
            if not data or not data.strip():
                raise ValueError("Data cannot be empty")
            
            system_prompt = (
                "You are a data analyst. Provide a comprehensive summary of the data provided. "
                "Focus on key insights, patterns, trends, and actionable conclusions. "
                "Structure your analysis clearly with specific findings."
            )
            
            logger.debug("Calling Azure OpenAI for data analysis")
            result = call_azure_openai(system_prompt, data)
            
            # Validate result
            if not result or not result.strip():
                raise ValueError("No analysis was generated by the AI model")
            
            logger.info("DataSummaryTool: Successfully analyzed data")
            return result.strip()
            
        except Exception as e:
            error_msg = f"DataSummaryTool failed: {str(e)}"
            logger.error(f"{error_msg}\nTraceback: {traceback.format_exc()}")
            raise RuntimeError(error_msg)

def get_tools():
    """
    Returns a dictionary of tools for each agent type
    """
    try:
        tools = {
            "content": [ContentWritingTool()],
            "coder": [CodeGenerationTool()],
            "analyst": [DataSummaryTool()]
        }
        logger.info("Tools initialized successfully")
        return tools
    except Exception as e:
        logger.error(f"Failed to initialize tools: {e}")
        raise RuntimeError(f"Tool initialization failed: {e}")